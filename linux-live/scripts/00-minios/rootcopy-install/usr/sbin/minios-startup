#!/bin/bash
#
# Ð¡ommand line parsing script.
# Author: crims0n. <http://minios.dev>
#

. /usr/lib/minioslib || exit 1

console_colors
allow_root_only

if [ ! -d /var/log/minios ]; then
    mkdir -p /var/log/minios
fi
exec 19>/var/log/minios/startup.trace
BASH_XTRACEFD=19
PS4='${LINENO}: '
set -x

# Variables
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
CMDLINE=$(cat /proc/cmdline)
CONFIG=/etc/minios/config
BUILDCONFIG=/etc/minios/buildconfig
read_cmdline "$CMDLINE"
if [ "$STATIC_PROFILES" = "true" ]; then
    exit 0
fi
if [ -f "$CONFIG" ]; then
    read_config "$CONFIG" LIVEKITNAME BEXT
else
    LIVEKITNAME="minios"
    BEXT="sb"
fi

if [ -z $FROM ] || echo $FROM | grep 'http://' || [ -d "/run/initramfs/memory/iso" ]; then
    FROM="$LIVEKITNAME"
elif [ -f /run/initramfs/var/log/from.log ]; then
    FROM=$(cat /run/initramfs/var/log/from.log)
fi
if [ -d "/run/initramfs/memory" ]; then
    LIVE="/run/initramfs/memory"
    INITRD_TYPE="livekit"
elif [ -d /memory ]; then
    LIVE="/memory"
    INITRD_TYPE="uird"
fi
BUNDLES="$LIVE/bundles"
CHANGES="$LIVE/changes"
if [ "$INITRD_TYPE" = "livekit" ]; then
    # search for bundles in the mounted directory
    if [ "$(find "/run/initramfs/memory/data/$FROM" -maxdepth 1 -name "*.$BEXT" 2>/dev/null)" != "" ]; then
        # we found at least one bundle/module here
        FROM=$(echo "/run/initramfs/memory/data/$FROM" | tr -s "/" | sed -r "s:/[^/]+/[.][.]/:/:g")
    elif [ "$(find "/run/initramfs/memory/iso/$FROM" -maxdepth 1 -name "*.$BEXT" 2>/dev/null)" != "" ]; then
        FROM=$(echo "/run/initramfs/memory/iso/$FROM" | tr -s "/" | sed -r "s:/[^/]+/[.][.]/:/:g")
    fi
    if [ "$TORAM" = "true" ]; then
        MEDIA="/run/initramfs/memory/toram"
    else
        MEDIA="$FROM"
    fi
elif [ "$INITRD_TYPE" = "uird" ]; then
    if [ "$(find "/memory/data/from/0/$FROM" -maxdepth 1 -name "*.$BEXT" 2>/dev/null)" != "" ]; then
        # we found at least one bundle/module here
        FROM=$(echo "/memory/data/from/0/$FROM" | tr -s "/" | sed -r "s:/[^/]+/[.][.]/:/:g")
    fi
    MEDIA="$FROM"
fi

if id -nu 1000 2>/dev/null; then
    CURRENT_USER_NAME=$(id -nu 1000)
    CURRENT_USER_GROUP=$(id -ng 1000)
fi

# Comparison of configuration files on the media and in the system
touch "$MEDIA/.empty" 2>/dev/null && rm -f "$MEDIA/.empty" 2>/dev/null
if [ $? -ne 0 ]; then
    WRITABLE="false"
    if [ -z "$SSH_KEY" ]; then
        SSH_KEY="authorized_keys"
    fi
    if [ -f "$MEDIA/$LIVEKITNAME.conf" ]; then
        if [ ! -f "/etc/minios/$LIVEKITNAME.conf" ]; then
            cp -fp "$MEDIA/$LIVEKITNAME.conf" "/etc/minios/$LIVEKITNAME.conf"
        fi
    fi
    if [ -f "$MEDIA/$SSH_KEY" ]; then
        if [ ! -d "/root/.ssh" ]; then
            mkdir /root/.ssh
            chmod 700 /root/.ssh
            cp -fp "$MEDIA/$SSH_KEY" "/root/.ssh/authorized_keys"
            chmod 600 "/root/.ssh/authorized_keys"
        fi
    fi
else
    WRITABLE="true"
    if [ -d "$MEDIA" ]; then
        if [ -f "$MEDIA/$LIVEKITNAME.conf" ] && [ -f "/etc/minios/$LIVEKITNAME.conf" ]; then
            if [ "$MEDIA/$LIVEKITNAME.conf" -nt "/etc/minios/$LIVEKITNAME.conf" ]; then
                cp -fp "$MEDIA/$LIVEKITNAME.conf" "/etc/minios/$LIVEKITNAME.conf"
            elif [ "$MEDIA/$LIVEKITNAME.conf" -ot "/etc/minios/$LIVEKITNAME.conf" ]; then
                cp -fp "/etc/minios/$LIVEKITNAME.conf" "$MEDIA/$LIVEKITNAME.conf"
            fi
        elif [ -f "$MEDIA/$LIVEKITNAME.conf" ]; then
            cp -fp "$MEDIA/$LIVEKITNAME.conf" "/etc/minios/$LIVEKITNAME.conf"
        elif [ -f "/etc/minios/$LIVEKITNAME.conf" ]; then
            cp -fp "/etc/minios/$LIVEKITNAME.conf" "$MEDIA/$LIVEKITNAME.conf"
        fi
        if [ -z "$SSH_KEY" ]; then
            SSH_KEY=$(read_config_value "/etc/minios/$LIVEKITNAME.conf" SSH_KEY)
            if [ -z "$SSH_KEY" ]; then
                SSH_KEY="authorized_keys"
            fi
        fi
        if [ ! -d "/root/.ssh" ]; then
            mkdir /root/.ssh
            chmod 700 /root/.ssh
        fi
        if [ -f "$MEDIA/$SSH_KEY" ] && [ -f "/root/.ssh/authorized_keys" ]; then
            if [ "$MEDIA/$SSH_KEY" -nt "/root/.ssh/authorized_keys" ]; then
                cp -fp "$MEDIA/$SSH_KEY" "/root/.ssh/authorized_keys"
                chmod 600 "/root/.ssh/authorized_keys"
            elif [ "$MEDIA/$SSH_KEY" -ot "/root/.ssh/authorized_keys" ]; then
                cp -fp "/root/.ssh/authorized_keys" "$MEDIA/$SSH_KEY"
            fi
        elif [ -f "$MEDIA/$SSH_KEY" ]; then
            cp -fp "$MEDIA/$SSH_KEY" "/root/.ssh/authorized_keys"
            chmod 600 "/root/.ssh/authorized_keys"
        elif [ -f "/root/.ssh/authorized_keys" ]; then
            cp -fp "/root/.ssh/authorized_keys" "$MEDIA/$SSH_KEY"
        fi
    fi
fi
if [ "$WRITABLE" = "true" ]; then
    if [ -f "/etc/minios/$LIVEKITNAME.conf" ]; then
        cp -fp "/etc/minios/$LIVEKITNAME.conf" "$MEDIA/$LIVEKITNAME.conf"
    fi
    if [ -f "/root/.ssh/authorized_keys" ]; then
        cp -fp "/root/.ssh/authorized_keys" "$MEDIA/$SSH_KEY"
    fi
fi

# Copying bootloader configuration files to the system
if [ -f "$MEDIA/boot/grub/grub.cfg" ]; then
    cp -fp "$MEDIA/boot/grub/grub.cfg" "/etc/$LIVEKITNAME/grub.cfg"
fi
cp -fp "$MEDIA/boot/syslinux.cfg" "/etc/$LIVEKITNAME/syslinux.cfg"

echo "Original /etc/minios/$LIVEKITNAME.conf configuration file contents:"
cat "/etc/minios/$LIVEKITNAME.conf"
echo ""

cat <<EOF >/etc/issue


                                                                          \\l





                        Thank you for using MiniOS.
EOF

if [ -f "$BUILDCONFIG" ]; then
    read_config "$BUILDCONFIG" DISTRIBUTION DESKTOP_ENVIRONMENT PACKAGE_VARIANT
    case $DISTRIBUTION in
    stretch | buster | bullseye | bookworm | kali-rolling | sid | orel)
        DISTRIBUTION_TYPE="debian"
        ;;
    bionic | cosmic | disco | eoan | focal | groovy | hirsute | impish | jammy | kinetic | lunar | mantic)
        DISTRIBUTION_TYPE="ubuntu"
        ;;
    *)
        echo "Unknown distribution: $DISTRIBUTION"
        exit 1
        ;;
    esac
    if [ "$DISTRIBUTION_TYPE" = "ubuntu" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;33mUbuntu[0;29m.
EOF
    elif [ "$DISTRIBUTION_TYPE" = "debian" ] && [ "$DISTRIBUTION" = "kali-rolling" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;36mKali Linux[0;29m.
EOF
    elif [ "$DISTRIBUTION_TYPE" = "debian" ] && [ "$DISTRIBUTION" = "orel" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;34mAstra Linux[0;29m.
EOF
    elif [ "$DISTRIBUTION_TYPE" = "debian" ] && [ "$DISTRIBUTION" != "kali-rolling" ]; then
        cat <<EOF >>/etc/issue
                        Based on [1;31mDebian GNU/Linux[0;29m.
EOF
    else
        cat <<EOF >>/etc/issue
                        Based on [1;31mDebian GNU/Linux[0;29m.
EOF
    fi
    if [ "$DESKTOP_ENVIRONMENT" = "flux" ]; then
        cat <<EOF >>/etc/issue
                        Powered by [1;32mSlax[0;29m.
EOF
    fi
else
    cat <<EOF >>/etc/issue
                        Based on [1;31mDebian GNU/Linux[0;29m.
EOF
fi

cat <<EOF >>/etc/issue

    [1;1m::::    ::::  ::::::::::: ::::    ::: ::::::::::: ::::::::   ::::::::  [0;29m
    [1;1m+:+:+: :+:+:+     :+:     :+:+:   :+:     :+:    :+:    :+: :+:    :+: [0;29m
    [1;1m+:+ +:+:+ +:+     +:+     :+:+:+  +:+     +:+    +:+    +:+ +:+        [0;29m
    [1;1m+#+  +:+  +#+     +#+     +#+ +:+ +#+     +#+    +#+    +:+ +#++:++#++ [0;29m
    [1;1m+#+       +#+     +#+     +#+  +#+#+#     +#+    +#+    +#+        +#+ [0;29m
    [1;1m#+#       #+#     #+#     #+#   #+#+#     #+#    #+#    #+# #+#    #+# [0;29m
    [1;1m###       ### ########### ###    #### ########### ########   ########  [0;29m 

EOF

# Declare an associative array for the variable names and their default values
declare -A VARIABLES_DEFAULTS=(
    ["USER_NAME"]="live"
    ["USER_PASSWORD"]="evil"
    ["ROOT_PASSWORD"]="toor"
    ["HOST_NAME"]="minios"
    ["DEFAULT_TARGET"]="graphical"
    ["SSH_KEY"]="authorized_keys"
    ["CLOUD"]="false"
    ["SCRIPTS"]="false"
    ["HIDE_CREDENTIALS"]="false"
    ["AUTOLOGIN"]="true"
    ["SYSTEM_TYPE"]="classic"
)

# Iterate over the variable names
for VAR_NAME in "${!VARIABLES_DEFAULTS[@]}"; do
    # Get the default value for the current variable name
    DEFAULT_VALUE="${VARIABLES_DEFAULTS[$VAR_NAME]}"
    # Check if the variable is not set
    if [ -z "${!VAR_NAME}" ]; then
        # Read the variable value from the configuration file
        read_config "/etc/minios/$LIVEKITNAME.conf" "$VAR_NAME"
        # Check if the variable is still not set
        if [ -z "${!VAR_NAME}" ]; then
            # Set the default value for the variable
            declare "$VAR_NAME=$DEFAULT_VALUE"
        fi
    fi
done

# Check if DEFAULT_TARGET is not a valid systemd target
if [[ ! "$DEFAULT_TARGET" =~ ^(graphical|multi-user|rescue|emergency)$ ]]; then
    # Set DEFAULT_TARGET to its default value
    DEFAULT_TARGET="${VARIABLES_DEFAULTS[DEFAULT_TARGET]}"
fi

# Check if SYSTEM_TYPE is not a valid value
if [[ ! "$SYSTEM_TYPE" =~ ^(classic|puzzle)$ ]]; then
    # Set SYSTEM_TYPE to its default value
    SYSTEM_TYPE="${VARIABLES_DEFAULTS[SYSTEM_TYPE]}"
fi

# Check if CLOUD is not a valid value
if [[ ! "$CLOUD" =~ ^(true|false)$ ]]; then
    # Set CLOUD to its default value
    CLOUD="${VARIABLES_DEFAULTS[CLOUD]}"
fi

# Check if SCRIPTS is not a valid value
if [[ ! "$SCRIPTS" =~ ^(true|false)$ ]]; then
    # Set SCRIPTS to its default value
    SCRIPTS="${VARIABLES_DEFAULTS[SCRIPTS]}"
fi

# Check if HIDE_CREDENTIALS is not a valid value
if [[ ! "$HIDE_CREDENTIALS" =~ ^(true|false)$ ]]; then
    # Set HIDE_CREDENTIALS to its default value
    HIDE_CREDENTIALS="${VARIABLES_DEFAULTS[HIDE_CREDENTIALS]}"
fi

# Check if AUTOLOGIN is not a valid value
if [[ ! "$AUTOLOGIN" =~ ^(true|false)$ ]]; then
    # Set AUTOLOGIN to its default value
    AUTOLOGIN="${VARIABLES_DEFAULTS[AUTOLOGIN]}"
fi

if [ "$SYSTEM_TYPE" = "puzzle" ]; then
    # fix users
    if [ -x "$(command -v minios-update-users)" ]; then
        minios-update-users "$BUNDLES" "$CHANGES" >/var/log/minios/minios-update-users.output 2>&1
    fi
    # fix caches
    if [ -x "$(command -v minios-update-cache)" ]; then
        minios-update-cache "$BUNDLES" >/var/log/minios/minios-update-cache.output 2>&1 &
    fi
    # fix dpkg
    if [ -x "$(command -v minios-update-dpkg)" ]; then
        minios-update-dpkg "$BUNDLES" "$CHANGES" >/var/log/minios/minios-update-dpkg.output 2>&1 &
    fi
fi

# Set up user 'root'
if [ ! -f /var/.system_configured ]; then
    cp -rT /etc/skel /root
    # create root directories
    if [ -d /root ]; then
        for DIR in Desktop Documents Downloads Music Pictures Public Templates Videos; do
            mkdir -p "/root/$DIR"
        done
        #cp /usr/share/applications/minios-installer.desktop /root/Desktop/
        #chmod +x /root/Desktop/minios-installer.desktop
    fi
    chown 0:0 /root
    chown -R 0:0 /root
    sed -i 's,01;32m,01;31m,g' /root/.bashrc
fi

if [ -f /usr/bin/x11vnc ]; then
    x11vnc -storepasswd "$ROOT_PASSWORD" /etc/vncpassword
fi

if [ "$CLOUD" != "true" ]; then
    if [ "$USER_NAME" != "root" ]; then
        echo "User name is $USER_NAME"
        # Set up user
        USER_GROUP=$USER_NAME
        if [ ! -f /var/.system_configured ]; then
            adduser --uid 1000 --gecos '' "$USER_NAME" --disabled-password
            usermod -aG adm,cdrom,sudo,dip,plugdev,users "$USER_NAME"
            if grep -q "lpadmin" /etc/group; then
                usermod -aG lpadmin,sambashare "$USER_NAME"
            fi
            if grep -q "libvirt" /etc/group; then
                usermod -aG docker,libvirt "$USER_NAME"
            fi
            if [ ! -f /usr/bin/pulseaudio ]; then
                usermod -aG audio "$USER_NAME"
            fi
            cp -rT /etc/skel "/home/$USER_NAME"
            # create user directories
            if [ -d "/home/$USER_NAME" ]; then
                for DIR in Desktop Documents Downloads Music Pictures Public Templates Videos; do
                    mkdir -p "/home/$USER_NAME/$DIR"
                done
                if [ ! -d "/home/$USER_NAME/.ssh" ]; then
                    mkdir "/home/$USER_NAME/.ssh"
                    chmod 700 "/home/$USER_NAME/.ssh"
                fi
                if [ -f /root/.ssh/authorized_keys ]; then
                    cp /root/.ssh/authorized_keys "/home/$USER_NAME/.ssh/authorized_keys"
                fi
                USER_ID=$(id -u "$USER_NAME")
                GROUP_ID=$(id -g "$USER_NAME")
                chown $USER_ID:$GROUP_ID "/home/$USER_NAME"
                chown -R $USER_ID:$GROUP_ID "/home/$USER_NAME"
            fi
        elif [ -n "$CURRENT_USER_NAME" ] && [ "$USER_NAME" != "$CURRENT_USER_NAME" ]; then
            usermod -l "$USER_NAME" "$CURRENT_USER_NAME"
            usermod -m -d "/home/$USER_NAME" "$USER_NAME"
            groupmod -n "$USER_GROUP" "$CURRENT_USER_GROUP"
        fi
    elif [ "$DESKTOP_ENVIRONMENT" = "flux" ]; then
        echo "User name is guest"
        # Set up user
        if [ ! -f /var/.system_configured ]; then
            adduser --uid 1000 --gecos '' guest --disabled-password
            usermod -aG adm,cdrom,sudo,dip,plugdev,users guest
            if grep -q "lpadmin" /etc/group; then
                usermod -aG lpadmin,sambashare guest
            fi
            if [ ! -f /usr/bin/pulseaudio ]; then
                usermod -aG audio guest
            fi
            cp -rT /etc/skel "/home/guest"
            chown guest:guest "/home/guest"
            chown -R guest:guest "/home/guest"
        fi
        # create user directories
        if [ -d "/home/guest" ]; then
            for DIR in Desktop Documents Downloads Music Pictures Public Templates Videos; do
                mkdir -p "/home/guest/$DIR"
            done
            if [ ! -d "/home/guest/.ssh" ]; then
                mkdir "/home/guest/.ssh"
                chmod 700 "/home/guest/.ssh"
            fi
            if [ -f /root/.ssh/authorized_keys ]; then
                cp /root/.ssh/authorized_keys "/home/guest/.ssh/authorized_keys"
            fi
            USER_ID=$(id -u "guest")
            GROUP_ID=$(id -g "guest")
            chown $USER_ID:$GROUP_ID "/home/guest"
            chown -R $USER_ID:$GROUP_ID "/home/guest"
        fi
    fi
else
    USER_NAME="root"
    DEFAULT_TARGET="multi-user"
fi

# Set up password for root
echo root:"$ROOT_PASSWORD" | chpasswd
if [ "$USER_NAME" != "root" ]; then
    # Set up password for user
    echo "$USER_NAME":"$USER_PASSWORD" | chpasswd
fi

if [ "$USER_NAME" != "root" ]; then
    cat <<EOF >/etc/sudoers.d/90-minios
# live user is default user in minios.
# It needs passwordless sudo functionality.
$USER_NAME ALL=(ALL) NOPASSWD:ALL
EOF
fi

if [ "$HIDE_CREDENTIALS" != "true" ]; then
    if [ "$CLOUD" != "true" ]; then
        if [ "$USER_NAME" != "root" ]; then
            cat <<EOF >>/etc/issue
                        Root login name: [1;33mroot[0;29m
                        Password: [1;33m$ROOT_PASSWORD[0;29m
                        User login name: [1;33m$USER_NAME[0;29m
                        Password: [1;33m$USER_PASSWORD[0;29m





EOF
        else
            cat <<EOF >>/etc/issue
                        Root login name: [1;33mroot[0;29m
                        Password: [1;33m$ROOT_PASSWORD[0;29m







EOF
        fi
    else
        cat <<EOF >>/etc/issue
                        User login name set by
                        cloud-init. You must use
                        your ssh key to login.
                        Root login name: [1;33mroot[0;29m
                        Password: [1;33m$ROOT_PASSWORD[0;29m






EOF
    fi
else
    cat <<EOF >>/etc/issue









EOF
fi

if [ "$CLOUD" != "true" ]; then
    if [ -n "$HOST_NAME" ]; then
        echo "$HOST_NAME" >/etc/hostname
        cat <<EOF >/etc/hosts
127.0.0.1       localhost $HOST_NAME
::1             localhost ip6-localhost ip6-loopback $HOST_NAME
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

EOF
    fi
fi

echo "=====> Making changes to the configuration file..."
echo "Changes:"

# Define a function to update the value of a variable in the configuration file
update_config_value() {
    # Get the current value of the variable
    local VAR_NAME="$1"
    local VAR_VALUE="${!VAR_NAME}"
    # Read the value of the variable from the configuration file
    local CONFIG_VALUE=$(read_config_value "/etc/minios/$LIVEKITNAME.conf" "$VAR_NAME")
    # Check if the current value is different from the value in the configuration file and is not empty
    if [ "$VAR_VALUE" != "$CONFIG_VALUE" ] && [ -n "$VAR_VALUE" ]; then
        # Update the value of the variable in the configuration file using the sed command
        sed -i -e "/$VAR_NAME=/s/=.*/=\"$VAR_VALUE\"/" "/etc/minios/$LIVEKITNAME.conf"
    fi
}

# Iterate over a list of variable names
for PARAM in USER_NAME USER_PASSWORD ROOT_PASSWORD HOST_NAME DEFAULT_TARGET ENABLE_SERVICES DISABLE_SERVICES SSH_KEY SCRIPTS AUTOLOGIN HIDE_CREDENTIALS INITRD_TYPE SYSTEM_TYPE EXPORT_LOGS; do
    # Call the update_config_value function for each variable to update its value in the configuration file
    update_config_value "$PARAM"
done

echo "
New /etc/minios/$LIVEKITNAME.conf configuration file contents:"
cat "/etc/minios/$LIVEKITNAME.conf"
echo ""

# If newer kernels are used, then xorg will not run on hyper-v without this configuration file.
read_config "$BUILDCONFIG" DISTRIBUTION DISTRIBUTION_TYPE KERNEL_BPO KERNEL_AUFS
if ([ "$DISTRIBUTION" = "bookworm" ] || [ "$DISTRIBUTION" = "kali-rolling" ] || [ "$DISTRIBUTION" = "sid" ]) || ([ "$DISTRIBUTION" = "bullseye" ] && [ "$KERNEL_BPO" = "true" ]) || ([ "$DISTRIBUTION_TYPE" = "ubuntu" ] && [ "$KERNEL_AUFS" = "true" ]); then
    if [ "$(virt-what)" = "hyperv" ]; then
        if [ ! -d /etc/X11/xorg.conf.d ]; then
            mkdir -p /etc/X11/xorg.conf.d
        fi
        cat <<EOF >/etc/X11/xorg.conf.d/30-hyperv.conf
Section "Device"
    Identifier  "HYPER-V Framebuffer"
    Driver      "fbdev"
EndSection

EOF
    fi
fi
if [ "$AUTOLOGIN" = "true" ]; then
    if [ -f /etc/default/nodm ]; then
        sed -i -e "/NODM_USER=/s/=.*/=\"$USER_NAME\"/" /etc/default/nodm
    fi
    if [ -f /etc/slim.conf ]; then
        sed -i -e "/default_user /s/ .*/ $USER_NAME/" /etc/slim.conf
        sed -i -e "/auto_login /s/ .*/ yes/" /etc/slim.conf
    fi
    if [ -f /etc/lightdm/lightdm.conf ]; then
        sed -i "s/#autologin-user=/autologin-user=/g" /etc/lightdm/lightdm.conf
        sed -i -e "/autologin-user=/s/=.*/=$USER_NAME/" /etc/lightdm/lightdm.conf
        sed -i "s/#autologin-user-timeout=/autologin-user-timeout=/g" /etc/lightdm/lightdm.conf
        sed -i -e "/autologin-user-timeout=/s/=.*/=0/" /etc/lightdm/lightdm.conf
    fi
else
    if [ -f /etc/default/nodm ]; then
        sed -i -e "/NODM_USER=/s/=.*/=\"\"/" /etc/default/nodm
    fi
    if [ -f /etc/slim.conf ]; then
        sed -i -e "/default_user /s/ .*/ /" /etc/slim.conf
        sed -i -e "/auto_login /s/ .*/ no/" /etc/slim.conf
    fi
    if [ -f /etc/lightdm/lightdm.conf ]; then
        if ! grep -q "#autologin-user=" /etc/lightdm/lightdm.conf; then
            sed -i "s/autologin-user=/#autologin-user=/g" /etc/lightdm/lightdm.conf
        fi
        if ! grep -q "#autologin-user-timeout=" /etc/lightdm/lightdm.conf; then
            sed -i "s/autologin-user-timeout=/#autologin-user-timeout=/g" /etc/lightdm/lightdm.conf
        fi
    fi
fi
##### Software configuration #####
# Setup Firefox
if [ -d /usr/share/minios/html ] && [ -f /usr/share/firefox-esr/browser/defaults/preferences/firefox-branding.js ]; then
    /usr/sbin/minios-firefox-patch
fi

if [ ! -f /var/.system_configured ]; then
    echo "MiniOS setup is completed." >/var/.system_configured
fi

set +x

read_config "/etc/minios/$LIVEKITNAME.conf" EXPORT_LOGS
DATE=$(date +%Y%m%d)
TIME=$(date +%H%M%S)
if [ "$EXPORT_LOGS" = "true" ]; then
    if [ "$WRITABLE" = "true" ]; then
        if [ ! -d "$MEDIA/log/$DATE" ]; then
            mkdir -p "$MEDIA/log/$DATE"
        fi
        for FILE in /var/log/minios/*; do
            if [ ! -d "$FILE" ] && [[ ! $(basename "$FILE") == boot* ]]; then
                FILE=$(basename "$FILE")
                NEW_FILENAME="${FILE%.*}-$TIME.${FILE##*.}"
                cp -fp "/var/log/minios/$FILE" "$MEDIA/log/$DATE/$NEW_FILENAME"
            fi
        done
        mkdir -p "$MEDIA/log/$DATE/users"
        for FILE in /var/log/minios/users/*; do
            if [ ! -d "$FILE" ]; then
                FILE=$(basename "$FILE")
                NEW_FILENAME="${FILE%.*}-$TIME.${FILE##*.}"
                cp -fp "/var/log/minios/users/$FILE" "$MEDIA/log/$DATE/users/$NEW_FILENAME"
            fi
        done
    fi
fi

exit 0
