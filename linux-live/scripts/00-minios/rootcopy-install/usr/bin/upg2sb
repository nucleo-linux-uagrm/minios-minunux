#!/bin/bash

# Author: crims0n. <http://minios.dev>

VERSION="1.1"
BEXT="sb"

function help() {
    echo "Usage: $(basename $0) [OPTIONS]"
    echo "Upgrades packages from repositories and packages them into a module."
    echo ""
    echo "Options:"
    echo "  -f, --file=FILE       use FILE as the filename for the module instead of 10-upgrade-[current datetime].$BEXT"
    echo "  -l, --level=LEVEL     use LEVEL as the filter level"
    echo "      --help            display this help and exit"
    echo "      --version         display version information and exit"
    echo ""
    echo "Examples:"
    echo "  $(basename $0)"
    echo "  $(basename $0) --level=03"
    echo "  $(basename $0) -f 04-upgrade.$BEXT -l 3"
    exit 0
}

function brief_help() {
    echo "Usage: $(basename $0) [OPTIONS]"
    echo "Try '$(basename $0) --help' for more information."
    exit 1
}

function version() {
    echo "$(basename $0) $VERSION"
    exit 0
}

function aufs_is_supported() {
    grep -q aufs /proc/filesystems
}

while [ $# -gt 0 ]; do
    case "$1" in
    -f | --file=*)
        if [ "$1" == --* ]; then
            FILENAME="${1#*=}"
        else
            FILENAME="$2"
            shift
        fi
        shift
        ;;
    -l | --level=*)
        if [ "$1" == --* ]; then
            FILTER_LEVEL=$(printf "%02d" "${1#*=}")
        else
            FILTER_LEVEL=$(printf "%02d" "$2")
            shift
        fi
        shift
        ;;
    --help)
        help
        ;;
    --version)
        version
        ;;
    *) # unknown option
        brief_help
        shift
        ;;
    esac
done

if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root."
    brief_help
fi

if [ -d "/run/initramfs/memory/bundles" ]; then
    BUNDLES="/run/initramfs/memory/bundles"
    SYSTEMCHANGES="/run/initramfs/memory/changes"
elif [ -d "/memory/bundles" ]; then
    BUNDLES="/memory/bundles"
    SYSTEMCHANGES="/memory/changes"
fi

# We use the changes folder to store temporary files and perform module
# builds because it is on the physical file system, which will avoid RAM
# leaks when building a large module.
#
TMP=$(mktemp -d "$SYSTEMCHANGES"/build2sb.XXXXX)
CHANGES="$TMP/changes"
UNION="$TMP/union"

trap 'if [ "$RESOLVCONFLNK" = "true" ]; then rm -f "$CHANGES/etc/resolv.conf" 2>/dev/null; else umount "$UNION/etc/resolv.conf" 2>/dev/null; fi; umount "$UNION/sys" 2>/dev/null; umount "$UNION/proc" 2>/dev/null; umount "$UNION/dev/pts" 2>/dev/null; umount "$UNION/dev" 2>/dev/null; rm "$CHANGES/install" 2>/dev/null; rmdir "$CHANGES/*" 2>/dev/null; umount "$UNION"; umount "$TMP" 2>/dev/null; rm -rf "$TMP"' EXIT

#mount -t tmpfs tmpfs "$TMP"
mkdir -p "$CHANGES"
mkdir -p "$UNION"

ROFLAG=""
if aufs_is_supported; then
    ROFLAG="=ro"
fi

if [ -n "$FILTER_LEVEL" ]; then
    for BUNDLE in $(ls -1dr "$BUNDLES"/*); do
        if [[ $(basename "$BUNDLE") =~ ^[0-9]+ ]]; then
            if [ ${BASH_REMATCH[0]} -gt $FILTER_LEVEL ]; then
                continue
            fi
        fi
        LOWERS+=$(printf '%s%s:' "$BUNDLE" "$ROFLAG")
    done
else
    for BUNDLE in $(ls -1dr "$BUNDLES"/*); do
        LOWERS+=$(printf '%s%s:' "$BUNDLE" "$ROFLAG")
    done
fi

LOWERS=${LOWERS/%:/}

if aufs_is_supported; then
    mount -t aufs -o br="$CHANGES"=rw:"$LOWERS" none "$UNION"
else
    mkdir $TMP/work
    mount -t overlay -o lowerdir="$LOWERS",upperdir="$CHANGES",workdir="$TMP"/work overlay "$UNION"
fi

for DIR in boot dev proc sys tmp media mnt run; do
    mkdir -p "$UNION/$DIR"
done

chmod ugo+rwx "$UNION/tmp"

for DIR in dev dev/pts proc sys; do
    mount --bind "/$DIR" "$UNION/$DIR"
done

echo "apt-get update; apt-get upgrade --yes" >"$UNION/install"
chmod ugo+x "$UNION/install"
if [ -L "$UNION/etc/resolv.conf" ]; then
    rm "$UNION/etc/resolv.conf"
    echo "nameserver 8.8.8.8" >"$UNION/etc/resolv.conf"
    RESOLVCONFLNK="true"
else
    mount --bind "/etc/resolv.conf" "$UNION/etc/resolv.conf"
fi
if ! /usr/sbin/chroot "$UNION" /install; then
    FAILED="true"
fi

if [ "$RESOLVCONFLNK" = "true" ]; then
    rm -f "$CHANGES/etc/resolv.conf"
else
    umount "$UNION/etc/resolv.conf"
fi
umount "$UNION/etc/resolv.conf"
umount "$UNION/sys"
umount "$UNION/proc"
umount "$UNION/dev/pts"
umount "$UNION/dev"
rm "$CHANGES/install"
rmdir "$CHANGES/*" 2>/dev/null

if [ "$FAILED" != "true" ]; then
    if [ ! "$FILENAME" ]; then
        if [ -n "$FILTER_LEVEL" ]; then
            PREFIX="$(printf "%02d" $((10#$FILTER_LEVEL + 1)))"
        else
            PREFIX="10"
        fi
        FILENAME="$PREFIX-upgrade-$(date +%y%m%d)".$BEXT
    fi

    echo "Saving changes made by upgrading packages into a module "$FILENAME"..."
    savechanges "$FILENAME" "$CHANGES"
fi
