#!/bin/bash

# This script is used for installing MiniOS on a disk.

# Include the minioslib library and exit if it fails
. /usr/lib/minioslib || exit 1

# Set the version number and current working directory
VERSION="1.0"
CWD=$(pwd)

# Read the configuration from /etc/minios/config for LIVEKITNAME and SYSTEMNAME variables
read_config /etc/minios/config LIVEKITNAME
LIVEKITNAME=${LIVEKITNAME:-"minios"}
read_config /etc/minios/buildconfig SYSTEMNAME
SYSTEMNAME=${SYSTEMNAME:-"MiniOS"}

# Regular expression pattern for filtering disks
REGEX='^$'

# Check if the script is running as root, if not, run with root privileges using pkexec
check_root() {
    if [[ $EUID -ne 0 ]]; then
        pkexec "$0"
        exit 0
    fi
}

# Translate text based on the system's locale
translate() {
    local TEXT=$1
    local LNG=$(locale | grep LANG | cut -d= -f2 | cut -d_ -f1)
    local TRANSLATION_FILE="/usr/share/minios/minios-installer/$LNG.json"
    if [ -f "$TRANSLATION_FILE" ]; then
        local TRANSLATION=$(jq -r --arg TEXT "$TEXT" '.[$TEXT]' "$TRANSLATION_FILE")
        if [ "$TRANSLATION" != "null" ]; then
            echo $TRANSLATION
        else
            echo $TEXT
        fi
    else
        echo $TEXT
    fi
}

# List available disks
list_disks() {
    DISKS=$(lsblk -Jo NAME,SIZE -n -d -I 3,8,259,252 | jq -r '.blockdevices[] | .name + "(" + .size + ")"')
    DISKS=$(echo $DISKS | tr ' ' '!')
    FILESYSTEMS="btrfs!ext2!ext3!ext4!fat32!ntfs"
}

# Get disk size in MiBs
get_disk_size() {
    parted -s $1 unit MiB print 2>/dev/null | grep $1 | cut -d' ' -f3 | tr -d MiB
}

# Partition the disk
partition_disk() {
    if [ "$FS" = "exfat" ]; then
        EFI_SUPPORT="TRUE"
    fi
    if [ "$EFI_SUPPORT" = "TRUE" ]; then
        if [ "$GPT_SUPPORT" = "TRUE" ]; then
            parted -s $DEV mklabel gpt
            DISK_SIZE=$(get_disk_size $DEV)
            ESP_START=$((DISK_SIZE - 100))
            parted -s $DEV mkpart primary 1MiB ${ESP_START}MiB
            parted -s $DEV mkpart ESP fat32 ${ESP_START}MiB 100%
            parted -s $DEV set 2 boot on
        else
            parted -s $DEV mklabel msdos
            DISK_SIZE=$(get_disk_size $DEV)
            ESP_START=$((DISK_SIZE - 100))
            parted -s $DEV mkpart primary fat32 1MiB ${ESP_START}MiB
            parted -s $DEV mkpart primary fat32 ${ESP_START}MiB 100%
            parted -s $DEV set 1 boot on
        fi
    else
        parted -s $DEV mklabel msdos
        parted -s $DEV mkpart primary ext2 1MiB 100%
    fi
}

# Wipe the disk
wipe_disk() {
    dd if=/dev/zero of=$DEV bs=4096 count=273
}

# Format the partition
format_partition() {
    if [ "$FS" = "fat32" ]; then
        mkfs.vfat "$PART"
    elif [ "$FS" = "btrfs" ] || [ "$FS" = "ntfs" ]; then
        mkfs."$FS" -f "$PART"
    else
        mkfs."$FS" "$PART"
    fi
    if [ "$EFI_SUPPORT" = "TRUE" ]; then
        mkfs.vfat "$EFI_PART"
    fi
}

# Mount the partition
mount_part() {
    if [ ! -d $DESTINATION ]; then
        mkdir -p $DESTINATION
        if ! mount $PART $DESTINATION; then
            exit 1
        fi
    fi
    if [ "$EFI_SUPPORT" = "TRUE" ]; then
        if [ ! -d $EFI_DESTINATION ]; then
            mkdir -p $EFI_DESTINATION
            if ! mount $EFI_PART $EFI_DESTINATION; then
                exit 1
            fi
        fi
    fi
    trap "umount $DESTINATION $EFI_DESTINATION 2>/dev/null; rmdir $DESTINATION $EFI_DESTINATION 2>/dev/null" EXIT
}

# Unmount the partition
umount_part() {
    if mountpoint -q $DESTINATION; then
        umount $DESTINATION
        rmdir $DESTINATION
    fi
    if mountpoint -q $EFI_DESTINATION; then
        umount $EFI_DESTINATION
        rmdir $EFI_DESTINATION
    fi
    if mount | grep -q "$PART"; then
        umount $PART
    fi
    if mount | grep -q "$EFI_PART"; then
        umount $EFI_PART
    fi
}

# Copy MiniOS files to the destination partition
copy_files() {
    if [ -d /run/initramfs/memory ]; then
        SOURCE="/run/initramfs/memory"
    elif [ -d /memory ]; then
        SOURCE="/memory"
    fi
    if [ -e "$SOURCE/data/$LIVEKITNAME/boot/vmlinuz" ]; then
        MINIOS=$SOURCE/data/$LIVEKITNAME
    elif [ -e "$SOURCE/iso/$LIVEKITNAME/boot/vmlinuz" ]; then
        MINIOS=$SOURCE/iso/$LIVEKITNAME
    elif [ -e "$SOURCE/toram/boot/vmlinuz" ]; then
        MINIOS=$SOURCE/toram
    elif [ -e "$SOURCE/data/from/0/$LIVEKITNAME/boot/vmlinuz" ]; then
        MINIOS=$SOURCE/data/from/0/$LIVEKITNAME
    fi

    if [ "$MINIOS" = "" ]; then
        echo "Cannot find boot/vmlinuz in MiniOS data" >&2
        exit 2
    fi
    EFI="$MINIOS/boot/EFI"
    echo $SYSTEMNAME >/tmp/info
    cat <<EOF >/tmp/README
# README file contents

* To install MiniOS, copy the contents of the ISO to the root of the media,
  then run minios\boot\bootinst.bat on Windows, or minios/boot/bootinst.sh
  on Linux.
* When installed on media with fat32 and ntfs file systems, changes in
  persistent changes mode will be saved in the minios\changes\changes.dat.x
  files, the files expands dynamically, the maximum size of each file is 4 GB.
* When installed on media with ext2-ext4, xfs, btrfs file systems, changes in
  the persistent changes mode will be saved in the minios\changes folder with
  no size limit.
EOF
    GRAFT=$(
        cd "$MINIOS"
        #find . -type f | sed -r "s:^[.]/::" | egrep -v "^boot/isolinux.(bin|boot)$" | egrep -v "^boot/isohdpfx.(bin|boot)$" | egrep -v "^changes/" | egrep -v "$REGEX" | while read LINE; do
        find . -type f | sed -r "s:^[.]/::" | egrep -v "^changes/" | egrep -v "$REGEX" | while read LINE; do
            echo "$LIVEKITNAME/$LINE=$MINIOS/$LINE"
        done
        cd "$EFI"
        find . -type f | sed -r "s:^[.]/::" | egrep -v "$REGEX" | while read LINE; do
            echo "EFI/$LINE=$EFI/$LINE"
        done
        echo ".disk/info=/tmp/info"
        echo "README=/tmp/README"
        echo "$LIVEKITNAME/$LIVEKITNAME.conf=/etc/$LIVEKITNAME/$LIVEKITNAME.conf"
        echo "$LIVEKITNAME/boot/grub/grub.cfg=/etc/$LIVEKITNAME/grub.cfg"
        echo "$LIVEKITNAME/boot/syslinux.cfg=/etc/$LIVEKITNAME/syslinux.cfg"
    )
    while IFS='=' read -r DESTINATION_FILE SOURCE_FILE; do
        echo "Copying $SOURCE_FILE to $DESTINATION/$DESTINATION_FILE"
        mkdir -p "$DESTINATION/$(dirname "$DESTINATION_FILE")"
        cp "$SOURCE_FILE" "$DESTINATION/$DESTINATION_FILE"
    done <<<"$GRAFT"
    mkdir -p $DESTINATION/$LIVEKITNAME/{boot,modules,changes,scripts}
    if [ "$EFI_SUPPORT" = "TRUE" ]; then
        GRAFT=$(
            cd "$EFI"
            find . -type f | sed -r "s:^[.]/::" | egrep -v "$REGEX" | while read LINE; do
                echo "EFI/$LINE=$EFI/$LINE"
            done
        )
        while IFS='=' read -r DESTINATION_FILE SOURCE_FILE; do
            echo "Copying $SOURCE_FILE to $EFI_DESTINATION/$DESTINATION_FILE"
            mkdir -p "$EFI_DESTINATION/$(dirname "$DESTINATION_FILE")"
            cp "$SOURCE_FILE" "$EFI_DESTINATION/$DESTINATION_FILE"
        done <<<"$GRAFT"
    fi
}

# Install the boot record
install_boot_record() {
    BOOT="$DESTINATION/$LIVEKITNAME/boot"
    cd "$BOOT"
    ARCH=$(uname -m)
    if [ "$ARCH" = "x86_64" ]; then ARCH=64; else ARCH=32; fi
    EXTLINUX=extlinux.x$ARCH
    if [ ! -x ./$EXTLINUX ]; then
        mount -o remount,exec $DEV
        chmod a+x ./$EXTLINUX
    fi
    if [ ! -x ./$EXTLINUX ]; then
        cp -f ./$EXTLINUX ./extlinux.exe
        EXTLINUX=extlinux.exe
    fi
    ./"$EXTLINUX" --install "$BOOT"
    if [ $? -ne 0 ]; then
        echo "Error installing boot loader."
        exit 1
    fi
    if [ "$DEV" != "$PART" ]; then
        dd bs=440 count=1 conv=notrunc if="$BOOT/mbr.bin" of="$DEV" 2>/dev/null
        PART="$(echo "$PART" | sed -r "s:.*[^0-9]::")"
        (
            fdisk -l "$DEV" | fgrep "*" | fgrep "$DEV" | cut -d " " -f 1 |
                sed -r "s:.*[^0-9]::" | xargs -I '{}' echo -ne "a\n{}\n"
            echo a
            echo $PART
            echo w
        ) | fdisk $DEV >/dev/null 2>&1
    fi
    #cp -r "EFI" "$BOOT/../../"
    echo "Boot installation finished."
    cd "$CWD"
}

# Show error message
show_error_message() {
    local error_message="$1"
    yad --borders=10 \
        --window-icon="ubiquity" \
        --title="$(translate 'Error')" \
        --error \
        --text="$(translate 'An error occurred during the installation of MiniOS on disk.')"
    exit 1
}

# Confirmation question for installation
installation_warning() {
    INSTALLATION_WARNING=$(
        yad --form \
            --borders=10 \
            --window-icon="ubiquity" \
            --title="$(translate 'WARNING!')" \
            --text="<span foreground=\"red\" font=\"Bold\" font-size=\"large\">$(translate 'All data on the selected device will be lost!')</span>\n<span font-size=\"large\">$(translate 'Selected device:')</span><span font=\"Bold\" font-size=\"large\">$DEV</span>" \
            --text-align="center" \
            --width=400 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --button="$(translate 'Return')!edit-undo":120 \
            --button="$(translate 'Continue')!gtk-ok":121
    )
    local BUTTON=$?

    case $BUTTON in
    120) # Return Main Menu
        main_menu
        ;;
    121) # Continue installation
        install_minios | yad --borders=10 --window-icon="ubiquity" --progress --width=250 --height=100 --title="$(translate 'MiniOS Installer')" --text="$(translate 'Installing...')" --auto-close --auto-kill
        ;;
    esac
}

# Perform the MiniOS installation process
install_minios() {
    echo "0"
    umount_part || show_error_message
    echo "5"
    wipe_disk || show_error_message
    echo "10"
    partition_disk || show_error_message
    echo "15"
    format_partition || show_error_message
    echo "20"
    mount_part || show_error_message
    echo "25"
    copy_files || show_error_message
    echo "90"
    if [ "$GPT_SUPPORT" != "TRUE" ] && [ "$FS" != "exfat" ]; then
        install_boot_record || show_error_message
    fi
    echo "95"
    umount_part || show_error_message
    echo "100"
    final_question
}
# Display the main menu for selecting installation options
main_menu() {
    list_disks
    MAIN_FORM=$(
        yad --form \
            --borders=10 \
            --window-icon="ubiquity" \
            --title="$(translate 'MiniOS Installer')" \
            --text="<span font-size=\"large\">$(translate 'Select installation options for MiniOS:')</span>\n" \
            --text-align="center" \
            --width=300 --height=200 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --field="$(translate 'Select device'):CB" "${DISKS}" \
            --field="$(translate 'Select file system'):CB" "${FILESYSTEMS}" \
            --field="$(translate 'EFI'):CHK" \
            --button="$(translate 'Cancel')!gtk-cancel":101 \
            --button="$(translate 'Install')!ubiquity":102 \
            --button="$(translate 'Reload')!gtk-refresh":103
    )
    local BUTTON=$?
    echo $BUTTON $MAIN_FORM
    DEV_DESC=$(echo "$MAIN_FORM" | cut -d"|" -f1)
    DEV_NAME=$(echo $DEV_DESC | cut -d "(" -f 1)
    if [[ $DEV_NAME == "nvme"* ]]; then
        PART_NAME="${DEV_NAME}p1"
        EFI_PART_NAME="${DEV_NAME}p2"
    else
        PART_NAME="${DEV_NAME}1"
        EFI_PART_NAME="${DEV_NAME}2"
    fi
    DEV="/dev/$DEV_NAME"
    PART="/dev/$PART_NAME"
    EFI_PART="/dev/$EFI_PART_NAME"
    FS=$(echo "$MAIN_FORM" | cut -d "|" -f2)
    EFI_SUPPORT=$(echo "$MAIN_FORM" | cut -d "|" -f3)
    #GPT_SUPPORT=$(echo "$MAIN_FORM" | cut -d "|" -f4)
    DESTINATION="/mnt/install/$PART_NAME"
    EFI_DESTINATION="/mnt/install/$EFI_PART_NAME"

    case $BUTTON in
    101)
        exit 0
        ;;
    102)
        installation_warning
        ;;
    103)
        main_menu
        ;;
    esac
}

#
final_question() {
    FINAL_FORM=$(
        yad --form \
            --borders=10 \
            --window-icon="ubiquity" \
            --title="$(translate 'MiniOS Installer')" \
            --text="$(translate 'Thank you for installing MiniOS.')" \
            --width=200 --height=100 \
            --buttons-layout="center" \
            --on-top \
            --form \
            --button="$(translate 'Finish')!gtk-ok":101 \
            --button="$(translate 'Reboot')!gtk-refresh":102
    )
    local BUTTON=$?

    case $BUTTON in
    101) # Finish MiniOS Installer
        exit
        ;;
    102) # Restart the Computer
        reboot
        ;;
    esac
}

# Check if the script is running as root, if not, run with root privileges using pkexec
check_root

# Start the installation process by displaying the main menu
main_menu
