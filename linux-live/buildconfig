#!/bin/bash

##### DISTRIBUTION SETTINGS #####
# distribution
#
# if Debian [stretch, buster, bullseye, bookworm, sid, kali-rolling, orel]
# if Ubuntu [bionic, focal, jammy]
DISTRIBUTION="bookworm"

# distribution arch
#
# [amd64, i386, i386-pae]
DISTRIBUTION_ARCH="amd64"

# desktop environment
#
# [core, flux, xfce, xfce-ultra, xfce-puzzle, xfce-puzzle-base, lxqt] | [xfce-minunux, xfce-minunux-base]
DESKTOP_ENVIRONMENT="xfce-minunux-base"

# system variant, indicates the used list of packages in modules
#
# [cloud, minimum, standard, maximum, ultra, puzzle] | new package variant = minunux
PACKAGE_VARIANT="minunux"

# compresssion type
#
# stretch: [xz, lzo, gz]
# buster+: [xz, lzo, gz, lz4, zstd]
COMP_TYPE="zstd"

###########################

##### KERNEL SETTINGS #####
# [none, default, rt, cloud, pve, ubuntu, ubuntu-hwe]
KERNEL_TYPE="default"

# Linux kernel from backports
#
# [true, false]
KERNEL_BPO="false"

# Debian kernel with AUFS support
#
# [true, false]
KERNEL_AUFS="true"

# if "true", then additional drivers for wireless network adapters are compiled during kernel installation
#
KERNEL_BUILD_DKMS="true"

# [livekit-mos, livekit-slax, uird]
INITRD_TYPE="livekit-mos"

# If true, then the names of initrfs.img and vmlinuz will indicate the version of the kernel for which they are intended.
#
# [true, false]
NAMED_BOOT_FILES="false"

# If true, then initrfs.img and vmlinuz will be copied to the minios-live/build/[distribution name]/kernel folder when the kernel is installed.
#
# [true, false]
EXPORT_KERNEL="true"

# If true, then initrfs.img and vmlinuz will be moved to the minios-live/build/[distribution name]/kernel folder when the kernel is installed.
#
# [true, false]
MOVE_KERNEL="false"

# If true, a log folder is created in the minios folder on the media, into which the system startup logs are copied.
#
# [true, false]
EXPORT_LOGS="false"
###########################

##### LOCALE&TIMEZONE SETTINGS #####
# [en_US, ru_RU, es_ES, pt_BR]
LOCALE="es_ES"

# If true, locales are generated for several languages defined in the LOCALES variable in minioslib
# [true, false]
MULTILINGUAL="false"

# It is not necessary to change the time zone, the system automatically determines the time zone and sets it to the current location if you have Internet access.
#
# [any timezone]
TIMEZONE="America/La_Paz"
###########################

##### minios.conf SETTINGS #####
USER_NAME="estudiante"
USER_PASSWORD="nucleolinux"
ROOT_PASSWORD="toor"

# this parameter only works for initrd livekit-mos
#
DEFAULT_TARGET="graphical"

# this parameter only works for initrd livekit-mos
#
ENABLE_SERVICES="docker"

# this parameter only works for initrd livekit-mos
#
DISABLE_SERVICES=""

# [true, false]
SCRIPTS="false"

# [true, false]
AUTOLOGIN="false"

# file name in the minios folder where the system will look for the ssh public key
#
# [any file name]
SSH_KEY="authorized_keys"

# [true, false]
CLOUD="false"

# Hide credentials displayed as a hint in the console
#
# [true, false]
HIDE_CREDENTIALS="true"

# When "puzzle" is set, operations necessary to handle modules that have been built relative to a certain common level are done at boot time; when "classic" is set, no such operations are done.
# If you plan to plug/unplug modules while the system is running and you don't plan to put packages into the system using apt, then you should use "puzzle".
# If you plan to use the system as a classic desktop system using saves, updating and installing packages with apt, you should use "classic".
#
# [сlassic, puzzle]
# !!!!!!!!!!!!!!!!!
# This variable is redefined in minioslib. For all variants of the system, except Puzzle, it is "classic".

SYSTEM_TYPE="puzzle"

###########################

# if ="true", creates a second iso with a constant filename
#
# [true, false]
BUILD_TEST_ISO="true"

# removes old iso files for this build type
#
# [true, false]
REMOVE_OLD_ISO="false"

# if ="true", creates a copy of minios-live in chroot /opt
#
# [true, false]
DEV_SYSTEM="false"

# if true, when building the system installs the sources in /opt/minios-live
#
# [true, false]
DOWNLOAD_SOURCES="false"

# [noninteractive, dialog, text]
DEBIAN_FRONTEND_TYPE="noninteractive"

# iso type
# тип iso
# [bios,hybrid]
BOOT_TYPE="hybrid"

# union type used to build the system
#
# [aufs, overlayfs]
UNION_BUILD_TYPE="overlayfs"

# Used when assigned to the ISO name when building minios-live
#
SYSTEMNAME="MiniOS"

# using a ready-made bootstrap file during installation. If absent, then it is downloaded and packaged. Subsequent builds unpack the existing bootstrap.
#
# [true, false]
USE_BOOTSTRAP="true"

# using a ready-made rootfs file during installation. If absent, then it is downloaded and packaged. Subsequent builds will unpack the existing rootfs file.
#
# [true, false]
USE_ROOTFS="true"

# [true, false]
USE_MX_REPO="false"
# [true, false]
USE_ANTIX_REPO="false"

# if true, then the installation of packages required for the build is skipped
#
# [true, false]
SKIP_SETUP_HOST="false"

# deleting sources after building
#
# [true, false]
REMOVE_SOURCES="false"

# if true, then removes the dpkg base from the module (it is necessary so that additional modules do not break the common base if they do not use the cumulative structure of modules and are built relative to a certain level, and not relative to all system modules)
#
# [true, false]
REMOVE_DPKG_DB="false"

# [true, false]
KERNEL_MODULES_ONLY="true"

# [true, false]
REMOVE_LARGE_ICONS="true"

# if true, then when building modules from within the system, allows you to set the maximum level at which modules will be built
# for example, level 4 is a build relative to modules 01-core, 01-firmware, 02-xorg, 03-desktop, 04-apps. If the module is built like this, then it will not conflict with any module built at level 4, if all modules 01-04 are present in the system.
#
# [true, false]
FILTER_MODULES="false"

# modules filter level, see above
#
# [0, 1, 2, 3, 4...]
FILTER_LEVEL="3"

# [true, false]
USE_UNOFFICIAL_REPOSITORY="false"

# [repo address]
UNOFFICIAL_REPOSITORY_ADDRESS="http://10.3.0.3"

# [true, false]
BUILD_FROM_SNAPSHOT="false"

# [snapshot date]
# For example, the latest date with an available Debian 9 repository is as follows
#SNAPSHOT_DATE="20220630T090257Z"
SNAPSHOT_DATE="20220223T214737Z"
